{"version":3,"sources":["../src/index.mts"],"names":["Showdown","loadLanguages","Prism","pkg","decode","showdownPrism","text","converter","options","params","replacement","wholeMatch","match","left","right","decodedMatch","lang","src_default"],"mappings":"AAAA,OAAOA,MAAqC,WAC5C,OAAOC,MAAmB,8BAC1B,OAAOC,MAAW,UAClB,OAAOC,MAAS,KAChB,GAAM,CAAE,OAAAC,CAAO,EAAID,EACnBF,EAAc,OAAS,GACvBA,EAAc,EAMd,SAASI,GAAqC,CAuC5C,MAtCiC,CAC/B,CACE,KAAM,SACN,OAAQ,CAACC,EAAMC,EAAWC,IAAY,CACpC,IAAMC,EAAS,CACb,KAAM,sBACN,MAAO,gBACP,MAAO,GACT,EACMC,EAAc,CAClBC,EACAC,EACAC,EACAC,IACG,CACH,IAAMC,EAAeX,EAAOQ,CAAK,EAC3BI,EAAOH,EAAK,MAAM,mBAAmB,IAAI,CAAC,GAAK,OACrD,OAAIG,GACFH,EAAO,wBAAwBG,CAAI,2BAA2BA,CAAI,KAEhEH,EACAX,EAAM,UAAUa,EAAcb,EAAM,UAAUc,CAAI,EAAGA,CAAI,EACzDF,GAGKH,CAEX,EACA,OAAOX,EAAS,OAAO,uBACrBM,EACAI,EACAD,EAAO,KACPA,EAAO,MACPA,EAAO,KACT,CACF,CACF,CACF,CAEF,CAEAT,EAAS,UAAU,gBAAiBK,CAAa,EAEjD,IAAOY,EAAQZ","sourcesContent":["import Showdown, { ShowdownExtension } from \"showdown\";\nimport loadLanguages from \"prismjs/components/index.js\";\nimport Prism from \"prismjs\";\nimport pkg from \"he\";\nconst { decode } = pkg;\nloadLanguages.silent = true;\nloadLanguages();\n/**\n * Returns an array of Showdown extensions that can be used to highlight code blocks in the output of Showdown.\n * @returns {ShowdownExtension[]} An array of Showdown extensions.\n */\n\nfunction showdownPrism(): ShowdownExtension[] {\n  const ext: ShowdownExtension[] = [\n    {\n      type: \"output\",\n      filter: (text, converter, options) => {\n        const params = {\n          left: \"<pre><code\\\\b[^>]*>\",\n          right: \"</code></pre>\",\n          flags: \"g\",\n        };\n        const replacement = (\n          wholeMatch: string,\n          match: string,\n          left: string,\n          right: string\n        ) => {\n          const decodedMatch = decode(match);\n          const lang = left.match(/class=\\\"([^ \\\"]+)/)?.[1] ?? undefined;\n          if (lang) {\n            left = `<pre class=\"language-${lang}\"><code class=\"language-${lang}\">`;\n            return (\n              left +\n              Prism.highlight(decodedMatch, Prism.languages[lang], lang) +\n              right\n            );\n          } else {\n            return wholeMatch;\n          }\n        };\n        return Showdown.helper.replaceRecursiveRegExp(\n          text,\n          replacement,\n          params.left,\n          params.right,\n          params.flags\n        );\n      },\n    },\n  ];\n  return ext;\n}\n\nShowdown.extension(\"showdownPrism\", showdownPrism);\n\nexport default showdownPrism;\n\n"]}