{"version":3,"sources":["../src/index.ts"],"names":["Showdown","Prism","decode","showdownPrism","text","converter","options","left","right","flags","re","replacement","wholeMatch","leftMatch","rightMatch","lang","langLeft","langRight","decodedMatch","src_default"],"mappings":"AAAA,OAAOA,MAAqC,WAC5C,OAAOC,MAAW,UAClB,OAAS,UAAAC,MAAc,KASvB,SAASC,GAAqC,CAmC1C,MAlCiC,CAC7B,CACI,KAAM,SACN,OAAQ,CAACC,EAAMC,EAAWC,IAAY,CAClC,IAAMC,EAAO,sBACPC,EAAQ,gBACRC,EAAQ,IACRC,EAAK,IAAI,OAAOH,EAAME,CAAK,EAC3BE,EAAc,CAChBC,EACAC,EACAC,IACC,CACD,IAAMC,EACFF,EAAU,MAAM,mBAAmB,IAAI,CAAC,GAAK,OACjD,GAAIE,EAAM,CACN,IAAMC,EAAW,wBAAwBD,CAAI,2BAA2BA,CAAI,KACtEE,EAAY,gBACZC,EAAehB,EACjBY,EAAW,UAAUD,EAAU,OAAQC,EAAW,OAASG,EAAU,MAAM,CAC/E,EACA,OACID,EACAf,EAAM,UAAUiB,EAAcjB,EAAM,UAAUc,CAAI,EAAGA,CAAI,EACzDE,CAER,KACI,QAAOL,CAEf,EACA,OAAOR,EAAK,QAAQM,EAAIC,CAAW,CACvC,CACJ,CACJ,CAEJ,CAEAX,EAAS,UAAU,gBAAiBG,CAAa,EAEjD,IAAOgB,EAAQhB","sourcesContent":["import Showdown, { ShowdownExtension } from \"showdown\";\nimport Prism from \"prismjs\";\nimport { decode } from \"he\";\n\n\n\n/**\n * Returns an array of Showdown extensions that can be used to highlight code blocks in the output of Showdown.\n * @returns {ShowdownExtension[]} An array of Showdown extensions.\n */\n\nfunction showdownPrism(): ShowdownExtension[] {\n    const ext: ShowdownExtension[] = [\n        {\n            type: \"output\",\n            filter: (text, converter, options) => {\n                const left = \"<pre><code\\\\b[^>]*>\";\n                const right = \"</code></pre>\";\n                const flags = \"g\";\n                const re = new RegExp(left, flags);\n                const replacement = (\n                    wholeMatch: string,\n                    leftMatch: string,\n                    rightMatch: string\n                ) => {\n                    const lang =\n                        leftMatch.match(/class=\\\"([^ \\\"]+)/)?.[1] ?? undefined;\n                    if (lang) {\n                        const langLeft = `<pre class=\"language-${lang}\"><code class=\"language-${lang}\">`;\n                        const langRight = `</code></pre>`;\n                        const decodedMatch = decode(\n                            rightMatch.substring(leftMatch.length, rightMatch.length - langRight.length)\n                        );\n                        return (\n                            langLeft +\n                            Prism.highlight(decodedMatch, Prism.languages[lang], lang) +\n                            langRight\n                        );\n                    } else {\n                        return wholeMatch;\n                    }\n                };\n                return text.replace(re, replacement);\n            },\n        },\n    ];\n    return ext;\n}\n\nShowdown.extension(\"showdownPrism\", showdownPrism);\n\nexport default showdownPrism;\n\n\n"]}